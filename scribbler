{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "/**\n * FormValidatorAI.js - AI-powered form validation library\n */\n\nclass FormValidatorAI {\n    constructor() {\n        this.rules = {\n            email: this.validateEmail,\n            phone: this.validatePhone,\n            name: this.validateName,\n            password: this.validatePassword,\n        };\n    }\n\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(email)) {\n            return `Invalid email format. Did you mean ${FormValidatorAI.suggestEmail(email)}?`;\n        }\n        return null;\n    }\n\n    static suggestEmail(email) {\n        const commonDomains = [\"gmail.com\", \"yahoo.com\", \"outlook.com\", \"hotmail.com\"];\n        let [local, domain] = email.split(\"@\");\n        if (!domain) return email;\n        \n        let closestMatch = commonDomains.find(d => d.startsWith(domain.slice(0, 3)));\n        return closestMatch ? `${local}@${closestMatch}` : email;\n    }\n\n    validatePhone(phone) {\n        const phoneRegex = /^\\d{10}$/;\n        return phoneRegex.test(phone) ? null : \"Invalid phone number format.\";\n    }\n\n    validateName(name) {\n        return name.length > 2 ? null : \"Name must be at least 3 characters long.\";\n    }\n\n    validatePassword(password) {\n        return password.length >= 6 ? null : \"Password must be at least 6 characters long.\";\n    }\n\n    validate(inputType, value) {\n        return this.rules[inputType] ? this.rules[inputType](value) : null;\n    }\n\n    attachValidation(formId) {\n        const form = document.getElementById(formId);\n        if (!form) return;\n        \n        form.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            const inputs = form.querySelectorAll(\"input\");\n            let valid = true;\n            \n            inputs.forEach(input => {\n                const error = this.validate(input.type, input.value);\n                if (error) {\n                    alert(error);\n                    valid = false;\n                }\n            });\n            \n            if (valid) form.submit();\n        });\n    }\n}\n\n// Example usage:\nconst validator = new FormValidatorAI();\nvalidator.attachValidation(\"myForm\");\n",
      "status": "[6]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}